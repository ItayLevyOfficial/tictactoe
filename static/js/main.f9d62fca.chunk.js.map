{"version":3,"sources":["components/square.js","components/row.js","components/board.js","components/game.js","index.js"],"names":["Square","props","className","isWinningSquare","onClick","value","Row","rowSquares","Array","from","_","columnIndex","key","winningSquares","includes","Board","rowIndex","rowStartIndex","squares","slice","winningRow","map","squareIndex","React","Component","Game","state","history","fill","xIsNext","stepNumber","isMovesListReversed","moveIndex","this","clickIndex","descreption","Math","floor","jumpTo","length","current","calculateWinner","moves","displayMoveButton","status","filter","Boolean","i","handleClick","toggleMovesList","reversed","reverse","setState","step","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9d62fca.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function Square(props) {\n  return (\n    <button className={props.isWinningSquare ? \"square winning-square\" : \"square\"} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\n","import React from \"react\";\nimport {Square} from \"./square\"\nexport function Row(props) {\n  const rowSquares = Array.from(\n    Array(3),\n    (_, columnIndex) => (\n      <Square\n        key={columnIndex}\n        onClick={() => props.onClick(columnIndex)}\n        value={props.rowSquares[columnIndex]}\n        isWinningSquare={props.winningSquares.includes(columnIndex)}\n      />));\n  \n  return (\n    <div className=\"board-row\">\n      {rowSquares}\n    </div>\n  )\n}\n\n","import React from \"react\";\nimport {Row} from \"./row\"\n\nexport class Board extends React.Component {\n  render() {\n    return Array.from(\n      Array(3),\n      (_, rowIndex) => {\n        const rowStartIndex = rowIndex * 3;\n        return (\n          <Row\n            onClick={(columnIndex) => this.props.onClick(rowStartIndex + columnIndex)}\n            rowSquares={this.props.squares.slice(rowStartIndex, rowStartIndex + 3)}\n            key={rowIndex}\n            winningSquares={\n              this.props.winningRow.map(squareIndex => squareIndex - rowStartIndex)\n            }\n          />\n        )\n      }\n    );\n  }\n}","import React from \"react\";\nimport {Board} from \"./board\";\n\nexport class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      xIsNext: true,\n      stepNumber: 0,\n      isMovesListReversed: false\n    }\n  }\n  \n  displayMoveButton(moveIndex) {\n    const history = this.state.history;\n    const clickIndex = history[moveIndex].clickIndex;\n    const descreption = moveIndex ?\n      `Shape: ${moveIndex % 2 === 0 ? 'O' : 'X'},\n         Line: ${clickIndex % 3 + 1},\n         Row: ${Math.floor(clickIndex / 3) + 1}` :\n      `Game start`;\n    return (\n      <li key={moveIndex}>\n        <button\n          onClick={() => this.jumpTo(moveIndex)}\n          className={history.length - 1 === moveIndex ? 'current-move' : 'not-current-move'}>\n          {descreption}\n        </button>\n      </li>\n    )\n  }\n  \n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winningRow = this.calculateWinner();\n    const moves = history.map((_, moveIndex) => this.displayMoveButton(moveIndex));\n    const status = (\n      winningRow ?\n        `Winner ${current.squares[winningRow[0]]}` :\n        current.squares.filter(Boolean).length === 9 ?\n          `Deuce` :\n          `Next player: ${this.state.xIsNext ? 'X' : 'O'}`\n    );\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            winningRow={winningRow ? winningRow : []}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button className=\"toggle-btn\" onClick={() => this.toggleMovesList()}>Toggle moves list</button>\n          <ol\n            reversed={this.state.isMovesListReversed}>\n            {this.state.isMovesListReversed ? moves.reverse() : moves}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n  \n  toggleMovesList() {\n    this.setState(\n      {\n        isMovesListReversed: !this.state.isMovesListReversed\n      }\n    )\n  }\n  \n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (!(this.calculateWinner() || squares[i])) {\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\n      this.setState(\n        {\n          history: [...history, {squares: squares, clickIndex: i}],\n          xIsNext: !this.state.xIsNext,\n          stepNumber: this.state.stepNumber + 1\n        }\n      );\n    }\n  }\n  \n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n      history: this.state.history.slice(0, step + 1)\n    });\n  }\n  \n  calculateWinner() {\n    const squares = this.state.history[this.state.history.length - 1].squares;\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return lines[i];\n      }\n    }\n    return null;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Game} from \"./components/game\";\n\nReactDOM.render(\n  <Game/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}